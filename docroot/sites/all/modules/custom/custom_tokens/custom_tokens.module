<?php
/**
 * @file
 * Provides special token to use with pathauto.
 *
 * @see httx://drupal.org/node/1308488
 */

/**
 * Provide information about our custom placeholder/token.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see httx://api.lullabot.com/token_example_token_info/7
 * @return array An associative array of available tokens and token types.
 *         Implements hook_token_info().
 */
function custom_tokens_token_info() {
	$info ['tokens'] ['node'] ['target_election'] = array (
			'name' => t ( 'Target Election' ),
			'description' => t ( 'Give value of taxonomy term target election releted to group which is associtated with content type Manifesto Item, Quesion, Answer and Poll.' ) 
	);
	
	$info ['tokens'] ['node'] ['group_name'] = array (
			'name' => t ( 'Name of Group' ),
			'description' => t ( 'Give name of group to which content type Manfesto Item, Answer,Question and Poll belong to.' ) 
	);
	
	return $info;
}

/**
 * Provide replacement values for placeholder tokens.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see httx://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *        	The machine-readable name of the type (group) of token being replaced, such
 *        	as 'node', 'user', or another type defined by a hook_token_info()
 *        	implementation.
 * @param array $tokens
 *        	An array of tokens to be replaced. The keys are the machine-readable token
 *        	names, and the values are the raw [type:token] strings that appeared in the
 *        	original text.
 * @param array $data
 *        	(optional)
 *        	An associative array of data objects to be used when generating replacement
 *        	values, as supplied in the $data parameter to token_replace().
 * @param array $options
 *        	(optional)
 *        	An associative array of options for token replacement; see token_replace()
 *        	for possible values.
 * @return array An associative array of replacement values, keyed by the raw [type:token]
 *         strings from the original text.
 *        
 *         implement hook_tokens
 */
function custom_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
	$replacements = array ();
	if ($type == 'node' && ! empty ( $data ['node'] )) {
		$node = $data ['node'];
		if ($node->type == 'post' || $node->type == 'question' || $node->type == 'answer' || $node->type == 'poll') {
			foreach ( $tokens as $name => $original ) {
				$node_id = $node->nid;
				$node = node_load ( $node_id );
				$group_id = $node->og_group_ref ['und'] [0] ['target_id'];
				$group = node_load ( $group_id );
				$group_name = $group->title;
				
				$target_election_tid = '';
				$target_election_name = '';
				// check if in group,election name field has value or not
				if (isset ( $group->field_group_election_name ['und'] [0] ['tid'] )) {
					$target_election_tid = $group->field_group_election_name ['und'] [0] ['tid'];
					$target_election_name = taxonomy_term_load ( $target_election_tid )->name;
				}
				switch ($name) {
					case 'target_election' :
						$replacements [$original] = $target_election_name;
						break;
					case 'group_name' :
						$replacements [$original] = $group_name;
				}
			}
		}
	}
	return $replacements;
}
